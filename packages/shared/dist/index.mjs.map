{"version":3,"sources":["../src/useRegressionChart.ts","../src/utils/statistics.ts","../src/useSimpleRegression.ts","../src/utils/matrixOperations.ts","../src/useMultipleRegression.ts"],"names":["useCallback","useState","getDefaultRegressionStats"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\";\n\nimport { useCallback } from 'react';\nimport { SimpleDataPoint, MultipleDataPoint, RegressionStats, ChartDomain } from './types';\n\nexport const useRegressionChart = () => {\n  const calculateChartDomain = useCallback((points: SimpleDataPoint[] | MultipleDataPoint[], selectedFeature = 0): ChartDomain => {\n    if (points.length === 0) {\n      return {\n        x: [-5, 5] as [number, number],\n        y: [-5, 5] as [number, number]\n      };\n    }\n\n    const isSimpleData = 'x' in points[0];\n    \n    const xValues = isSimpleData\n      ? (points as SimpleDataPoint[]).map(p => p.x)\n      : (points as MultipleDataPoint[]).map(p => p.features[selectedFeature]);\n    const yValues = isSimpleData\n      ? (points as SimpleDataPoint[]).map(p => p.y)\n      : (points as MultipleDataPoint[]).map(p => p.output);\n      \n    const xMin = Math.min(...xValues);\n    const xMax = Math.max(...xValues);\n    const yMin = Math.min(...yValues);\n    const yMax = Math.max(...yValues);\n\n    const xPadding = Math.max(1, (xMax - xMin) * 0.1);\n    const yPadding = Math.max(1, (yMax - yMin) * 0.1);\n\n    return {\n      x: [xMin - xPadding, xMax + xPadding] as [number, number],\n      y: [yMin - yPadding, yMax + yPadding] as [number, number]\n    };\n  }, []);\n\n  const getRegressionLinePoints = useCallback((\n    type: 'simple' | 'multiple',\n    points: SimpleDataPoint[] | MultipleDataPoint[],\n    stats: RegressionStats,\n    selectedFeature: number,\n    domain: { x: [number, number]; y: [number, number] }\n  ) => {\n    const linePoints: { x: number; yRegression: number }[] = [];\n    const step = (domain.x[1] - domain.x[0]) / 99;\n\n    if (type === 'simple') {\n      if (!stats.slope && !stats.intercept) {\n        return linePoints;\n      }\n\n      for (let i = 0; i <= 99; i++) {\n        const x = domain.x[0] + (step * i);\n        const yRegression = stats.slope * x + stats.intercept;\n        linePoints.push({ x, yRegression });\n      }\n    } else {\n      if (!stats.coefficients || !stats.coefficients.length) {\n        return linePoints;\n      }\n\n      const multiPoints = points as MultipleDataPoint[];\n      // Calculate mean values for non-selected features\n      const meanFeatures = Array(2).fill(0);\n      multiPoints.forEach(point => {\n        point.features.forEach((val, idx) => {\n          meanFeatures[idx] += val;\n        });\n      });\n      meanFeatures.forEach((sum, idx) => {\n        meanFeatures[idx] = (sum / multiPoints.length) || 0;\n      });\n\n      const coefficients = stats.coefficients;\n      for (let i = 0; i <= 99; i++) {\n        const x = domain.x[0] + (step * i);\n        // Create a feature vector with the current x value and mean values for other features\n        const features = [...meanFeatures];\n        features[selectedFeature] = x;\n        \n        // Calculate predicted y using coefficients\n        const yRegression = coefficients[0] + features.reduce((sum, feat, idx) => {\n          return sum + coefficients[idx + 1] * feat;\n        }, 0);\n        \n        linePoints.push({ x, yRegression });\n      }\n    }\n    \n    return linePoints;\n  }, []);\n\n  const generateTicks = useCallback((min: number, max: number, count = 5): number[] => {\n    const step = (max - min) / (count - 1);\n    return Array.from({ length: count }, (_, i) => min + step * i);\n  }, []);\n\n  return {\n    calculateChartDomain,\n    getRegressionLinePoints,\n    generateTicks\n  };\n};\n","export const mean = (values: number[]): number => {\n  if (values.length === 0) return 0;\n  return values.reduce((sum, val) => sum + val, 0) / values.length;\n};\n\nexport const variance = (values: number[]): number => {\n  if (values.length < 2) return 0;\n  const m = mean(values);\n  return values.reduce((sum, val) => sum + Math.pow(val - m, 2), 0) / (values.length - 1);\n};\n\nexport const calculatePValue = (tStat: number, degreesOfFreedom: number): number => {\n  // Using a simplified t-distribution approximation\n  // For more accurate results, you might want to use a statistical library\n  const x = degreesOfFreedom / (degreesOfFreedom + tStat * tStat);\n  const beta = Math.exp(\n    0.5 * (Math.log(degreesOfFreedom) - Math.log(2 * Math.PI)) -\n    Math.log(Math.sqrt(x * (1 - x)))\n  );\n  return 2 * (1 - beta);\n};\n","\"use client\";\n\nimport { useState, useCallback } from 'react';\nimport { SimpleDataPoint, RegressionStats } from './types';\nimport { mean, variance, calculatePValue } from './utils/statistics';\n\nexport const useSimpleRegression = () => {\n  const [simplePoints, setSimplePoints] = useState<SimpleDataPoint[]>([]);\n  const [manualMode, setManualMode] = useState(false);\n  const [manualSlope, setManualSlope] = useState(0);\n  const [manualIntercept, setManualIntercept] = useState(0);\n\n  const calculateSimpleRegression = useCallback((points: SimpleDataPoint[]): RegressionStats => {\n    if (points.length < 2) {\n      return getDefaultRegressionStats();\n    }\n\n    try {\n      const n = points.length;\n      const xMean = mean(points.map(p => p.x));\n      const yMean = mean(points.map(p => p.y));\n      const xVariance = variance(points.map(p => p.x));\n      \n      // Calculate slope and intercept\n      let slope: number;\n      let intercept: number;\n      \n      if (manualMode) {\n        slope = manualSlope;\n        intercept = manualIntercept;\n      } else {\n        let numerator = 0;\n        let denominator = 0;\n        \n        points.forEach(point => {\n          numerator += (point.x - xMean) * (point.y - yMean);\n          denominator += Math.pow(point.x - xMean, 2);\n        });\n        \n        slope = numerator / denominator;\n        intercept = yMean - slope * xMean;\n      }\n      \n      // Calculate predicted values and residuals\n      const yPred = points.map(p => slope * p.x + intercept);\n      const residuals = points.map((p, i) => p.y - yPred[i]);\n      \n      // Calculate sum of squares\n      const tss = points.reduce((sum, p) => sum + Math.pow(p.y - yMean, 2), 0);\n      const rss = residuals.reduce((sum, r) => sum + Math.pow(r, 2), 0);\n      const mss = tss - rss;\n      \n      // Calculate R-squared\n      const rSquared = 1 - (rss / tss);\n      \n      // Calculate standard errors and t-statistics\n      const dfTotal = n - 1;\n      const dfRegression = 1;\n      const dfResidual = n - 2;\n      const mse = rss / dfResidual;\n      \n      const standardErrorSlope = Math.sqrt(mse / (n * xVariance));\n      const standardErrorIntercept = Math.sqrt(mse * (1/n + Math.pow(xMean, 2)/(n * xVariance)));\n      \n      const tStatisticSlope = slope / standardErrorSlope;\n      const tStatisticIntercept = intercept / standardErrorIntercept;\n      \n      const pValueSlope = calculatePValue(Math.abs(tStatisticSlope), dfResidual);\n      const pValueIntercept = calculatePValue(Math.abs(tStatisticIntercept), dfResidual);\n      \n      // Calculate adjusted R-squared\n      const adjustedRSquared = 1 - ((1 - rSquared) * dfTotal / dfResidual);\n      \n      // Calculate F-statistic\n      const fStatistic = (mss / dfRegression) / (rss / dfResidual);\n      const pValueF = calculatePValue(Math.sqrt(fStatistic), dfResidual);\n\n      return {\n        slope: slope,\n        intercept: intercept,\n        rSquared,\n        calculatedSlope: slope,\n        calculatedIntercept: intercept,\n        tss,\n        mss,\n        rss,\n        tStatisticSlope,\n        tStatisticIntercept,\n        pValueSlope,\n        pValueIntercept,\n        fStatistic,\n        pValueF,\n        standardErrorSlope,\n        standardErrorIntercept,\n        vif: 1,\n        adjustedRSquared,\n        dfRegression,\n        dfResidual,\n        dfTotal,\n        coefficients: [intercept, slope]\n      };\n    } catch (error) {\n      console.error('Error calculating regression:', error);\n      return getDefaultRegressionStats();\n    }\n  }, [manualMode, manualSlope, manualIntercept]);\n\n  const generateRandomSimplePoints = useCallback((count: number): SimpleDataPoint[] => {\n    const points: SimpleDataPoint[] = [];\n    // Randomize slope and intercept for more variation\n    const slope = Math.random() * 6 - 3;  // Random slope between -3 and 3\n    const intercept = Math.random() * 4 - 2;  // Random intercept between -2 and 2\n    const noise = 1.5;  // Increased noise for more variation\n\n    for (let i = 0; i < count; i++) {\n      const x = Math.random() * 10 - 5;  // Random x between -5 and 5\n      // Add more randomized noise\n      const noiseAmount = (Math.random() * 2 - 1) * noise * (1 + Math.random());  // Variable noise\n      const y = slope * x + intercept + noiseAmount;\n      points.push({ x, y });\n    }\n\n    return points;\n  }, []);\n\n  return {\n    simplePoints,\n    setSimplePoints,\n    manualMode,\n    setManualMode,\n    manualSlope,\n    setManualSlope,\n    manualIntercept,\n    setManualIntercept,\n    calculateSimpleRegression,\n    generateRandomSimplePoints\n  };\n};\n\n// Helper function to get default regression stats\nfunction getDefaultRegressionStats(): RegressionStats {\n  return {\n    slope: 0,\n    intercept: 0,\n    rSquared: 0,\n    calculatedSlope: 0,\n    calculatedIntercept: 0,\n    tss: 0,\n    mss: 0,\n    rss: 0,\n    tStatisticSlope: 0,\n    tStatisticIntercept: 0,\n    pValueSlope: 1,\n    pValueIntercept: 1,\n    fStatistic: 0,\n    pValueF: 1,\n    standardErrorSlope: 0,\n    standardErrorIntercept: 0,\n    vif: 1,\n    adjustedRSquared: 0,\n    dfRegression: 0,\n    dfResidual: 0,\n    dfTotal: 0,\n    coefficients: [0, 0]\n  };\n}\n","export type Matrix = number[][];\n\nexport const transpose = (matrix: Matrix): Matrix => {\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  const result: Matrix = Array(cols).fill(0).map(() => Array(rows).fill(0));\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      result[j][i] = matrix[i][j];\n    }\n  }\n\n  return result;\n};\n\nexport const multiply = (a: Matrix, b: Matrix): Matrix => {\n  const aRows = a.length;\n  const aCols = a[0].length;\n  const bCols = b[0].length;\n  const result: Matrix = Array(aRows).fill(0).map(() => Array(bCols).fill(0));\n\n  for (let i = 0; i < aRows; i++) {\n    for (let j = 0; j < bCols; j++) {\n      for (let k = 0; k < aCols; k++) {\n        result[i][j] += a[i][k] * b[k][j];\n      }\n    }\n  }\n\n  return result;\n};\n\nexport const inverse = (matrix: Matrix): Matrix => {\n  const n = matrix.length;\n  const augmented: Matrix = matrix.map((row, i) => \n    [...row, ...Array(n).fill(0).map((_, j) => i === j ? 1 : 0)]\n  );\n\n  // Gaussian elimination\n  for (let i = 0; i < n; i++) {\n    const pivot = augmented[i][i];\n    if (Math.abs(pivot) < 1e-10) {\n      throw new Error('Matrix is singular');\n    }\n\n    for (let j = 0; j < 2 * n; j++) {\n      augmented[i][j] /= pivot;\n    }\n\n    for (let k = 0; k < n; k++) {\n      if (k !== i) {\n        const factor = augmented[k][i];\n        for (let j = 0; j < 2 * n; j++) {\n          augmented[k][j] -= factor * augmented[i][j];\n        }\n      }\n    }\n  }\n\n  return augmented.map(row => row.slice(n));\n};\n","\"use client\";\n\nimport { useState, useCallback } from 'react';\nimport { MultipleDataPoint, RegressionStats } from './types';\nimport { mean, calculatePValue } from './utils/statistics';\nimport { transpose, multiply, inverse } from './utils/matrixOperations';\n\nexport const useMultipleRegression = () => {\n  const [multiplePoints, setMultiplePoints] = useState<MultipleDataPoint[]>([]);\n  const [selectedFeature, setSelectedFeature] = useState(0);\n\n  const calculateMultipleRegression = useCallback((points: MultipleDataPoint[]): RegressionStats => {\n    if (points.length < 2) {\n      return {\n        ...getDefaultRegressionStats(),\n        coefficients: [0, 0, 0]\n      };\n    }\n\n    try {\n      const n = points.length;\n      const p = points[0].features.length;\n\n      // Create X matrix with a column of 1s for intercept\n      const X = points.map(point => [1, ...point.features]);\n      const y = points.map(point => point.output);\n\n      // Calculate X'X\n      const XtX = multiply(transpose(X), X);\n      \n      // Calculate inverse of X'X\n      const XtXInv = inverse(XtX);\n      \n      // Calculate X'y\n      const Xty = multiply(transpose(X), y.map(val => [val])).map(row => row[0]);\n      \n      // Calculate coefficients\n      const coefficients = multiply(XtXInv, Xty.map(val => [val])).map(row => row[0]);\n      \n      // Calculate predicted values\n      const yPred = multiply(X, coefficients.map(val => [val])).map(row => row[0]);\n      \n      // Calculate means\n      const yMean = mean(y);\n      \n      // Calculate sum of squares\n      const tss = y.reduce((sum, val) => sum + Math.pow(val - yMean, 2), 0);\n      const rss = y.reduce((sum, val, i) => sum + Math.pow(val - yPred[i], 2), 0);\n      const mss = tss - rss;\n      \n      // Calculate R-squared and adjusted R-squared\n      const rSquared = 1 - (rss / tss);\n      const dfTotal = n - 1;\n      const dfRegression = p;\n      const dfResidual = n - (p + 1);\n      const adjustedRSquared = 1 - ((1 - rSquared) * dfTotal / dfResidual);\n\n      // Calculate standard errors and t-statistics\n      const mse = rss / dfResidual;\n      const standardErrors = XtXInv.map((row, i) => Math.sqrt(mse * row[i]));\n      const tStatistics = coefficients.map((coef, i) => coef / standardErrors[i]);\n\n      // Calculate F-statistic\n      const fStatistic = (mss / dfRegression) / (rss / dfResidual);\n      const pValueF = calculatePValue(Math.sqrt(fStatistic), dfResidual);\n\n      return {\n        slope: coefficients[1],\n        intercept: coefficients[0],\n        rSquared,\n        calculatedSlope: coefficients[1],\n        calculatedIntercept: coefficients[0],\n        tss,\n        mss,\n        rss,\n        tStatisticSlope: tStatistics[1],\n        tStatisticIntercept: tStatistics[0],\n        pValueSlope: calculatePValue(Math.abs(tStatistics[1]), dfResidual),\n        pValueIntercept: calculatePValue(Math.abs(tStatistics[0]), dfResidual),\n        fStatistic,\n        pValueF,\n        standardErrorSlope: standardErrors[1],\n        standardErrorIntercept: standardErrors[0],\n        vif: 1,\n        adjustedRSquared,\n        dfRegression,\n        dfResidual,\n        dfTotal,\n        coefficients\n      };\n    } catch (error) {\n      console.error('Error calculating multiple regression:', error);\n      return {\n        ...getDefaultRegressionStats(),\n        coefficients: [0, 0, 0]\n      };\n    }\n  }, []);\n\n  const generateRandomMultiplePoints = useCallback((count: number): MultipleDataPoint[] => {\n    const points: MultipleDataPoint[] = [];\n    const coefficients = [2, 3]; // True coefficients for features\n    const intercept = 1; // True intercept\n    const noise = 0.5; // Noise level\n\n    for (let i = 0; i < count; i++) {\n      const features = coefficients.map(() => Math.random() * 10 - 5); // Random features between -5 and 5\n      const output = intercept + features.reduce((sum, feat, idx) => sum + coefficients[idx] * feat, 0)\n        + (Math.random() * 2 - 1) * noise; // Add random noise\n      points.push({ features, output });\n    }\n    return points;\n  }, []);\n\n  return {\n    multiplePoints,\n    setMultiplePoints,\n    selectedFeature,\n    setSelectedFeature,\n    calculateMultipleRegression,\n    generateRandomMultiplePoints\n  };\n};\n\n// Helper function to get default regression stats\nfunction getDefaultRegressionStats(): RegressionStats {\n  return {\n    slope: 0,\n    intercept: 0,\n    rSquared: 0,\n    calculatedSlope: 0,\n    calculatedIntercept: 0,\n    tss: 0,\n    mss: 0,\n    rss: 0,\n    tStatisticSlope: 0,\n    tStatisticIntercept: 0,\n    pValueSlope: 1,\n    pValueIntercept: 1,\n    fStatistic: 0,\n    pValueF: 1,\n    standardErrorSlope: 0,\n    standardErrorIntercept: 0,\n    vif: 1,\n    adjustedRSquared: 0,\n    dfRegression: 0,\n    dfResidual: 0,\n    dfTotal: 0,\n    coefficients: [0, 0]\n  };\n}\n"]}